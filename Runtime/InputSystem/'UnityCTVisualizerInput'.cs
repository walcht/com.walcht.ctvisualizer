//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Packages/com.walcht.ctvisualizer/Runtime/InputSystem/'UnityCTVisualizerInput'.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnityCTVisualizer
{
    public partial class @UnityCTVisualizerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UnityCTVisualizerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""'UnityCTVisualizerInput'"",
    ""maps"": [
        {
            ""name"": ""VolumetricObjectControls"",
            ""id"": ""3331f265-8976-47ab-9358-5339ca680113"",
            ""actions"": [
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""6073668b-178b-455d-90f6-acb3adc031c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SlowScaleActivator"",
                    ""type"": ""Button"",
                    ""id"": ""5c824625-8ce3-486e-85c4-4791c161e4b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""469de6c6-daed-4279-80ec-b376e2e47bcb"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f035aff9-67cc-465d-b3e5-e9dedb58d738"",
                    ""path"": ""<Pointer>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01ec5642-8f67-4c18-84c8-8b70804d6ce8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlowScaleActivator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // VolumetricObjectControls
            m_VolumetricObjectControls = asset.FindActionMap("VolumetricObjectControls", throwIfNotFound: true);
            m_VolumetricObjectControls_Scale = m_VolumetricObjectControls.FindAction("Scale", throwIfNotFound: true);
            m_VolumetricObjectControls_SlowScaleActivator = m_VolumetricObjectControls.FindAction("SlowScaleActivator", throwIfNotFound: true);
        }

        ~@UnityCTVisualizerInput()
        {
            UnityEngine.Debug.Assert(!m_VolumetricObjectControls.enabled, "This will cause a leak and performance issues, UnityCTVisualizerInput.VolumetricObjectControls.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // VolumetricObjectControls
        private readonly InputActionMap m_VolumetricObjectControls;
        private List<IVolumetricObjectControlsActions> m_VolumetricObjectControlsActionsCallbackInterfaces = new List<IVolumetricObjectControlsActions>();
        private readonly InputAction m_VolumetricObjectControls_Scale;
        private readonly InputAction m_VolumetricObjectControls_SlowScaleActivator;
        public struct VolumetricObjectControlsActions
        {
            private @UnityCTVisualizerInput m_Wrapper;
            public VolumetricObjectControlsActions(@UnityCTVisualizerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Scale => m_Wrapper.m_VolumetricObjectControls_Scale;
            public InputAction @SlowScaleActivator => m_Wrapper.m_VolumetricObjectControls_SlowScaleActivator;
            public InputActionMap Get() { return m_Wrapper.m_VolumetricObjectControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VolumetricObjectControlsActions set) { return set.Get(); }
            public void AddCallbacks(IVolumetricObjectControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_VolumetricObjectControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VolumetricObjectControlsActionsCallbackInterfaces.Add(instance);
                @Scale.started += instance.OnScale;
                @Scale.performed += instance.OnScale;
                @Scale.canceled += instance.OnScale;
                @SlowScaleActivator.started += instance.OnSlowScaleActivator;
                @SlowScaleActivator.performed += instance.OnSlowScaleActivator;
                @SlowScaleActivator.canceled += instance.OnSlowScaleActivator;
            }

            private void UnregisterCallbacks(IVolumetricObjectControlsActions instance)
            {
                @Scale.started -= instance.OnScale;
                @Scale.performed -= instance.OnScale;
                @Scale.canceled -= instance.OnScale;
                @SlowScaleActivator.started -= instance.OnSlowScaleActivator;
                @SlowScaleActivator.performed -= instance.OnSlowScaleActivator;
                @SlowScaleActivator.canceled -= instance.OnSlowScaleActivator;
            }

            public void RemoveCallbacks(IVolumetricObjectControlsActions instance)
            {
                if (m_Wrapper.m_VolumetricObjectControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVolumetricObjectControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_VolumetricObjectControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VolumetricObjectControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VolumetricObjectControlsActions @VolumetricObjectControls => new VolumetricObjectControlsActions(this);
        public interface IVolumetricObjectControlsActions
        {
            void OnScale(InputAction.CallbackContext context);
            void OnSlowScaleActivator(InputAction.CallbackContext context);
        }
    }
}
